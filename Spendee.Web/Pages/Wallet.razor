@page "/wallet/{Id:int}"
@inject IHttpClientFactory ClientFactory

@if (transactions == null || wallet == null)
{
    <p><em>Caricamento...</em></p>
}
else
{
    <PageTitle>Portafoglio: @wallet.Name</PageTitle>

    <h1>Portafoglio: @wallet.Name</h1>
    <h3>Disponibilità: @getDisponibility()</h3>

    <a href="wallet/@(Id)/new" class="btn btn-success">Aggiungi transazione</a>
    <table class="table">
        <thead>
            <tr>
                <th>Descrizione</th>
                <th>Prezzo</th>
                <th>Categoria</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in transactions)
            {
                <tr>
                    <td>@item.Description</td>
                    <td style="color: @(item.Price > 0 ? "green" : "red")">@item.Price</td>
                    <td>@item.Category.Name</td>
                    <td>@item.Date.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private WalletDTO wallet;
    private TransactionDTO[] transactions;

    protected override async Task OnInitializedAsync()
    {
        //Recuperare informazioni portafoglio
        var walletResponse = await ClientFactory.CreateClient("api").GetAsync($"/wallets");
        var wallets = await walletResponse.Content.ReadFromJsonAsync<WalletDTO[]>();
        wallet = wallets.FirstOrDefault(w => w.Id == Id);

        //Recuperare informazioni sulle transazioni
        var transactionsResponse = await ClientFactory.CreateClient("api").GetAsync($"/wallets/{Id}");
        if (transactionsResponse.IsSuccessStatusCode)
            transactions = await transactionsResponse.Content.ReadFromJsonAsync<TransactionDTO[]>();
        else
            transactions = Array.Empty<TransactionDTO>();
    }

    string getDisponibility() => transactions.Sum(t => t.Price).ToString("0.00") + wallet.Currency;
}
